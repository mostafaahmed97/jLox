package lox;

import lox.Expr.*;
import lox.Stmt.*;

import java.util.ArrayList;
import java.util.List;

/* 
 * The interpretor evaluates the AST that the parser produced
 *  it's implemented as a visitor instead of stuffing that
 * logic inside each node, similar to how we did the printer 
 */

/*
 * To support dynamic types in Lox
 * we use Object to correspond to our
 * variables in Java, in runtime we can
 * check what the variable's type is
 * bec. JVM supports type checking in
 * runtime
 */

public class Interpreter implements Expr.Visitor<Object>, Stmt.Visitor<Void> {

    // The runtime storage for variables
    private Environment environment = new Environment();

    /*
     * Takes in the syntax tree
     * generated by the parser & kicks
     * off the evalution chain.
     */
    void interpret(List<Stmt> statements) {
        try {
            for (Stmt stmt : statements)
                execute(stmt);
        }
        // Catch our custom runtime exception
        catch (RuntimeError error) {
            Lox.runtimeError(error);
        }
    }

    /*
     * A literal is our last stop,
     * similar to how primary was during
     * parsing
     */
    @Override
    public Object visitLiteralExpr(Literal expr) {
        return expr.value;
    }

    @Override
    public Object visitLogicalExpr(Logical expr) {
        Object left = evaluate(expr.left);

        if (expr.operator.type == TokenType.OR) {
            if (isTruthy(left))
                return left;
        }
        // If operation was an and
        else {
            // & left was not true then we short circuit
            if (!isTruthy(left))
                return left;
        }

        return evaluate(expr.right);
    }

    /*
     * A grouping expr only has one sub
     * expression, so we evaluate that
     * & return the value
     */
    @Override
    public Object visitGroupingExpr(Grouping expr) {
        return evaluate(expr.expression);
    }

    /*
     * Unary evaluates it's sub expr
     * and then does it's own action
     * (P.S: A unary can be ! or -)
     * 
     * We're basically doing a post order
     * traversal of the AST, an expr can't
     * evaluate it's value before it's children
     */
    @Override
    public Object visitUnaryExpr(Unary expr) {

        // Get the value for right sub expr
        Object right = evaluate(expr.right);

        switch (expr.operator.type) {
            case MINUS:
                checkNumberOperand(expr.operator, right);
                // We're casting to a double in runtime bec. we
                // can't know type statically
                return -(double) right;

            case BANG:
                return !isTruthy(right);

        }

        // Unreachable
        return null;
    }

    @Override
    public Object visitVariableExpr(Variable expr) {
        return environment.get(expr.name);
    }

    @Override
    public Object visitBinaryExpr(Binary expr) {

        // This order is part of the language semantics
        // Binary expressions are evaluated left to right
        Object left = evaluate(expr.left);
        Object right = evaluate(expr.right);

        switch (expr.operator.type) {
            case GREATER:
                checkNumberOperand(expr.operator, left, right);
                return (double) left > (double) right;
            case GREATER_EQUAL:
                checkNumberOperand(expr.operator, left, right);
                return (double) left >= (double) right;
            case LESS:
                checkNumberOperand(expr.operator, left, right);
                return (double) left < (double) right;
            case LESS_EQUAL:
                checkNumberOperand(expr.operator, left, right);
                return (double) left <= (double) right;
            case MINUS:
                checkNumberOperand(expr.operator, left, right);
                return (double) left - (double) right;
            case PLUS:
                if (left instanceof Double && right instanceof Double)
                    return (double) left + (double) right;

                if (left instanceof String && right instanceof String)
                    return (String) left + (String) right;

                if (left instanceof String || right instanceof String)
                    return left.toString() + right.toString();

                throw new RuntimeError(
                        expr.operator,
                        "Operands must be two numbers or two strings.");
            case SLASH:
                checkNumberOperand(expr.operator, left, right);
                return (double) left / (double) right;
            case STAR:
                checkNumberOperand(expr.operator, left, right);
                return (double) left * (double) right;
            case BANG_EQUAL:
                return !isEqual(left, right);
            case EQUAL_EQUAL:
                return isEqual(left, right);

        }

        // Unreachable
        return null;
    }

    private void checkNumberOperand(Token operator, Object operand) {
        if (operand instanceof Double)
            return;

        throw new RuntimeError(operator, "Operand must be a number");
    }

    private void checkNumberOperand(Token operator, Object left, Object right) {
        if (left instanceof Double && right instanceof Double)
            return;

        throw new RuntimeError(operator, "Operands must be numbers");
    }

    @Override
    public Object visitCallExpr(Call expr) {
        Object callee = evaluate(expr.callee);

        // If it's something that cant be called (string, number, ...) ,throw runtime
        if (!(callee instanceof LoxCallable))
            throw new RuntimeError(expr.paren, "Can only call functions and classes.");

        List<Object> arguments = new ArrayList<>();
        for (Expr argument : expr.arguments)
            arguments.add(evaluate(argument));

        /*
         * Cast the callee as LoxCallablle to use it's methods
         * It should be so bec we checked above
         */
        LoxCallable function = (LoxCallable) callee;

        if (arguments.size() != function.arity())
            throw new RuntimeError(expr.paren, "Expected " +
                    function.arity() + " arguments but got " +
                    arguments.size() + ".");

        return function.call(this, arguments);
    }

    /*
     * This method defines what our language
     * considers truthy or falsey.
     */
    private boolean isTruthy(Object object) {
        if (object == null)
            return false;
        if (object instanceof Boolean)
            return (boolean) object;

        // Everything else is true, empty strings, empty lists, etc..
        return true;
    }

    /*
     * This method is as important as isTruhty()
     * It defines the notion of equality for Lox in
     * terms of it's Java implementation
     */
    private boolean isEqual(Object a, Object b) {
        if (a == null && b == null)
            return true;
        if (a == null)
            return false;

        // No implicit conversions
        // '3' != 3
        return a.equals(b);
    }

    /*
     * The same idea as print() in ASTPrinter.
     * Given an expression, this method calls
     * accept() of that expression & passes
     * to it this (which is the visitor instance).
     * That way the expression calls the appropriate
     * method for itself (visitBinaryExpr, visitUnaryExpr, etc..)
     * & returns the value.
     */

    private Object evaluate(Expr expr) {
        return expr.accept(this);
    }

    /*
     * For a statement
     * 1 - visitor calls accept() of stmt
     * and passes itself
     * 2 - statement calls correct handling for itself
     * from visitor (check Stmt.java)
     * 3 - we come back here, in visitExpressionStatement()
     * for example
     * 4 - call evaluate on the expression object
     * 5 - same idea until we reach the end
     */
    private void execute(Stmt stmt) {
        stmt.accept(this);
    }

    @Override
    public Void visitBlockStmt(Block stmt) {
        executeBlock(stmt.statements, new Environment(environment));
        return null;
    }

    void executeBlock(List<Stmt> statements, Environment environment) {
        Environment previous = this.environment;

        try {
            for (Stmt statement : statements)
                execute(statement);
        } finally {
            this.environment = previous;
        }
    }

    @Override
    public Void visitExpressionStmt(Expression stmt) {
        evaluate(stmt.expression);
        return null;
    }

    @Override
    public Void visitIfStmt(If stmt) {
        if (isTruthy(evaluate(stmt.condition)))
            execute(stmt.thenBranch);
        else if (stmt.elseBranch != null)
            execute(stmt.elseBranch);

        return null;
    }

    @Override
    public Void visitWhileStmt(While stmt) {
        while (isTruthy(evaluate(stmt.condition)))
            execute(stmt.body);
        return null;
    }

    @Override
    public Void visitPrintStmt(Print stmt) {
        Object value = evaluate(stmt.expression);
        System.out.println(stringify(value));
        return null;
    }

    // Declares a variable
    @Override
    public Void visitVarStmt(Var stmt) {
        Object value = null;
        if (stmt.initializer != null)
            value = evaluate(stmt.initializer);

        environment.define(stmt.name.lexeme, value);
        return null;
    }

    @Override
    public Object visitAssignExpr(Assign expr) {
        Object value = evaluate(expr.value);
        environment.assign(expr.name, value);

        // Assignment is an expr not a statement, so it returns a value
        return value;
    }

    // A util to print a value based on it's runtime type
    // Another bridge between Lox & Java (like isEqual & isTruthy)
    private String stringify(Object object) {
        if (object == null)
            return "nil";

        if (object instanceof Double) {
            String text = object.toString();
            if (text.endsWith(".0")) {
                text = text.substring(0, text.length() - 2);
            }
            return text;
        }

        return object.toString();
    }

}
